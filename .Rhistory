load("~/Code/surrogateMutation/data/surrogateResult.RData")
surrogateResult$mutCopyFrames[[1]][1:5,]
library(graph)
names(surrogateResult$mutCopyFrames)
?graph
library(graph)
help(package="graph")
load("~/Code/hnscSurrogateSubnetworks/data/intome.RData")
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
countMuts <- countMuts(inBoth)
subNet <- subGraph(inBoth, graph)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
geneIntTable[geneIntTable$Gene == "BRCA1",]
test <- getSubnetworkForSamples("BRCA(672)", intome, surrResult = surrogateResult)
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, graph)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
test
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
inEdges("BRCA1(672)", intome)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
test
plot(test)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- countMuts
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
plot(test)
names(test)
nodes(test)
str(test)
nodes(test)
strsplit(nodes(test), "(")
strsplit(nodes(test), "\(")
strsplit(nodes(test), "\\(")
lapply(nodes(test), function(x){strsplit(nodes(x), "\\(")[[1]][1]})
test
testNodes <- nodes(test)
testNodes
lapply(testNodes, function(x){strsplit(nodes(x), "\\(")[[1]][1]})
lapply(testNodes, function(x){strsplit(x, "\\(")[[1]][1]})
unlist(lapply(nodes(test), function(x){strsplit(x, "\\(")[[1]][1]}))
testNames <- unlist(lapply(nodes(test), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(test) <- testNames
test
plot(test)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- countMuts
nodeNames <- unlist(lapply(nodes(test), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
plot(test)
nodeData(test,attr = "counts")
nodeData(test)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, "counts") <- countMuts
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
?nodeData
class(intome)
nodeData(test)
nodeData(test, "counts")
nodeData(test, attr = "counts")
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intome <- graph
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- countMuts
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
countMuts <- countMuts[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- countMuts
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
nodeData(test, attr="counts")
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1 })
print(allMutCount)
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
allMutCount <- allMutCount[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- countMuts
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
test <- list(c(1,2,3), c(1,3,2))
Reduce("+", test)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1
return(allMutCount)})
allMutCount <- Reduce("+", countMuts)
print(allMutCount)
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
allMutCount <- allMutCount[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- countMuts
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1
return(allMutCount)})
allMutCount <- Reduce("+", countMuts)
print(allMutCount)
inBoth <- intersect(intomeNodes,allMuts)
inBoth <- c(inBoth, surrogateNode)
allMutCount <- allMutCount[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- allMutCount
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
nodeData(test, attr="counts")
getSubnetworkForSamples <- function(surrogateNode, intome, surrResult, sampList=NULL){
require(graph)
intomeNodes <- inEdges(surrogateNode, intome)[[1]]
intomeNodes <- c(surrogateNode, intomeNodes)
mutCopyFrames <- surrResult$mutCopyFrames
if(!is.null(sampList)){
mutCopyFrames <- mutCopyFrames[[sampList]]
}
allMutList <- lapply(mutCopyFrames, function(x){as.character(x$NodeName)})
allMuts <- Reduce(union, allMutList)
#print(allMuts)
allMutCount <- rep(0, length(allMuts))
names(allMutCount) <- allMuts
#need function for counting mutations here
countMuts <- lapply(allMutList, function(x){allMutCount[x] <- allMutCount[x] +1
return(allMutCount)})
allMutCount <- Reduce("+", countMuts)
print(allMutCount)
inBoth <- intersect(intomeNodes,allMuts)
if(!surrogateNode %in% inBoth){
inBoth <- c(inBoth, surrogateNode)}
allMutCount <- allMutCount[inBoth]
subNet <- subGraph(inBoth, intome)
nodeDataDefaults(subNet, "counts") <- 0
nodeData(subNet, attr="counts") <- allMutCount
nodeNames <- unlist(lapply(nodes(subNet), function(x){strsplit(x, "\\(")[[1]][1]}))
nodes(subNet) <- nodeNames
return(subNet)
}
nodeData(test, attr="counts")
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
nodeData(test, attr="counts")
require(testthat)
ccc <- nodeData(test, attr="counts")
ccc
library(surrogateMutation)
test <- buildSurrogateTable(surrogateResult)
test
class(test$Gene)
class(test$degree)
test <- getSubnetworkForSamples("BRCA1(672)", intome, surrResult = surrogateResult)
expect_equal(length(nodes), 7)
nodeCounts <- nodeData(test, attr="counts")
expect_equal(nodeCounts$MYC, 3)
plot(test)
length(nodes(test))
expect_equal(length(nodes(test)), 7)
test <- buildSurrogateTable(surrogateResult)
expect_equal(class(test$Gene), "factor")
expect_equal(class(test$ID), "factor")
expect_equal(class(test$degree), "numeric")
library(surrogateMutation)
install.packages("~/Code/surrogateMutation_0.1.tgz", repos = NULL, type = .Platform$pkgType)
